(()=>{"use strict";var e={6516:(e,s,t)=>{e.exports=t.p+"assets/png/A.49a402e872b3d594082f..png"},8027:(e,s,t)=>{e.exports=t.p+"assets/png/CA1D-L.2ed9fd628a6a7f8e836b..png"},6897:(e,s,t)=>{e.exports=t.p+"assets/png/CA1D-S.f7afaff1c33d3bb16613..png"},2584:(e,s,t)=>{e.exports=t.p+"assets/png/ES-L.0133670037f2e1294ff4..png"},6564:(e,s,t)=>{e.exports=t.p+"assets/png/ES-S.3375a650cf9ce3f3bfd9..png"},2101:(e,s,t)=>{e.exports=t.p+"assets/png/GOL.3040c02bfe7acf2220e9..png"},346:(e,s,t)=>{e.exports=t.p+"assets/png/MNCA-L.39680327ca382626b0af..png"},6980:(e,s,t)=>{e.exports=t.p+"assets/png/MNCA-S.91cfd5f4d7ce8fe6cff0..png"},6549:(e,s,t)=>{e.exports=t.p+"assets/png/Maze-L.18b41c0134ca49c56770..png"},3686:(e,s,t)=>{e.exports=t.p+"assets/png/Maze-S.b798ef5c62cd02662759..png"},9016:(e,s,t)=>{e.exports=t.p+"assets/png/SnakeAI-L.8586f737eec5cc920258..png"},9825:(e,s,t)=>{e.exports=t.p+"assets/png/SnakeAI-S.b7876875697a4c1edbc9..png"},8198:(e,s,t)=>{e.exports=t.p+"assets/png/SoundWave-L.5d31735d6826b43f0959..png"},5387:(e,s,t)=>{e.exports=t.p+"assets/png/SoundWave-S.8babd76a1c4da35883bd..png"},6130:(e,s,t)=>{e.exports=t.p+"assets/png/TicTacToe-L.e4f6750c3a1037eff6e9..png"},6798:(e,s,t)=>{e.exports=t.p+"assets/png/TicTacToe-S.c5e3113eca7355217b02..png"},1260:(e,s,t)=>{e.exports=t.p+"assets/png/pygame.002fa81871a2c554b5bf..png"},7104:(e,s,t)=>{e.exports=t.p+"assets/svg/Bash.0d036437dcf421580c36..svg"},5595:(e,s,t)=>{e.exports=t.p+"assets/svg/Django.6bb8fe083e33773eda27..svg"},1016:(e,s,t)=>{e.exports=t.p+"assets/svg/Fortran.f1306891bc2fb09b4e54..svg"},7714:(e,s,t)=>{e.exports=t.p+"assets/svg/GIT.43d387b77657117c0e40..svg"},2600:(e,s,t)=>{e.exports=t.p+"assets/svg/Julia.80894cc33bc7bd7478e1..svg"},2297:(e,s,t)=>{e.exports=t.p+"assets/svg/Markdown.866163e7187bfa2dde45..svg"},446:(e,s,t)=>{e.exports=t.p+"assets/svg/Matplotlib.829556f27987946ea433..svg"},730:(e,s,t)=>{e.exports=t.p+"assets/svg/MongoDB.3beac5ba18197ccbdea6..svg"},3326:(e,s,t)=>{e.exports=t.p+"assets/svg/Numpy.1bc50e78c4d1726a5987..svg"},179:(e,s,t)=>{e.exports=t.p+"assets/svg/OpenGL.b1f22675e6ac9ed32ff3..svg"},5882:(e,s,t)=>{e.exports=t.p+"assets/svg/P5.fd5e940f76eecab1d78d..svg"},5270:(e,s,t)=>{e.exports=t.p+"assets/svg/Processing.de6dc331fb725b192bbe..svg"},1075:(e,s,t)=>{e.exports=t.p+"assets/svg/R.2da55f926557c943ffe7..svg"},2593:(e,s,t)=>{e.exports=t.p+"assets/svg/Redis.ec242f3c46d8c90224c1..svg"},3676:(e,s,t)=>{e.exports=t.p+"assets/svg/SFML.70f27935eb1b0a45bdd9..svg"},5235:(e,s,t)=>{e.exports=t.p+"assets/svg/Scikit.e5d5511886dd21f4fef0..svg"},3979:(e,s,t)=>{e.exports=t.p+"assets/svg/Sqlite.84de32c4a3096d108c7c..svg"},6606:(e,s,t)=>{e.exports=t.p+"assets/svg/Tensorflow.d978d6b0a450f5416ab4..svg"},6365:(e,s,t)=>{e.exports=t.p+"assets/svg/Typescript.f20748caf2dac55710dd..svg"},6995:(e,s,t)=>{e.exports=t.p+"assets/svg/Vulkan.ba76083bd6b5f77795c4..svg"},8810:(e,s,t)=>{e.exports=t.p+"assets/svg/bootstrap.91aad92a015faa64813b..svg"},8440:(e,s,t)=>{e.exports=t.p+"assets/svg/c++.5eb1abc418ed3dd0e1d2..svg"},7795:(e,s,t)=>{e.exports=t.p+"assets/svg/c-programming.f3c93ffaea1321f5cfc0..svg"},6456:(e,s,t)=>{e.exports=t.p+"assets/svg/c-sharp.7e5502c786806dcdb380..svg"},8790:(e,s,t)=>{e.exports=t.p+"assets/svg/css.3ec320225ef851ed26cf..svg"},9784:(e,s,t)=>{e.exports=t.p+"assets/svg/expressjs.632d3c32e6c8f71f7f7f..svg"},6841:(e,s,t)=>{e.exports=t.p+"assets/svg/html.c1bb84e022ca9d76984d..svg"},1349:(e,s,t)=>{e.exports=t.p+"assets/svg/java.5386b56c3206b6bd70b1..svg"},7838:(e,s,t)=>{e.exports=t.p+"assets/svg/js.081325c6f229605dce15..svg"},5840:(e,s,t)=>{e.exports=t.p+"assets/svg/keras.66f62f3193cd67bc4977..svg"},4475:(e,s,t)=>{e.exports=t.p+"assets/svg/mysql.c9286640a470004f40f8..svg"},8966:(e,s,t)=>{e.exports=t.p+"assets/svg/nodejs.cccdafa931eebdaea49f..svg"},9558:(e,s,t)=>{e.exports=t.p+"assets/svg/pandas.04d448889f1d2da5bc85..svg"},8980:(e,s,t)=>{e.exports=t.p+"assets/svg/php.34ba1821ec86b383b281..svg"},3705:(e,s,t)=>{e.exports=t.p+"assets/svg/python.d32e17a67e47af5af825..svg"},4857:(e,s,t)=>{e.exports=t.p+"assets/svg/react-native.867e22e5a0394f9e99bb..svg"},7916:(e,s,t)=>{e.exports=t.p+"assets/svg/react.563f61e9f4371a643f7d..svg"},4906:(e,s,t)=>{e.exports=t.p+"assets/svg/redux.0a4a6ca2be44339bedb6..svg"},3148:(e,s,t)=>{e.exports=t.p+"assets/svg/rust.e2e65ae361c8f36f3206..svg"},1910:(e,s,t)=>{e.exports=t.p+"assets/svg/sass.903cef0c9879296f452e..svg"},5253:(e,s,t)=>{e.exports=t.p+"assets/svg/tailwindcss.1ff53afb0748cd483d5f..svg"}},s={};function t(a){var o=s[a];if(void 0!==o)return o.exports;var n=s[a]={exports:{}};return e[a](n,n.exports,t),n.exports}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var s=t.g.document;if(!e&&s&&(s.currentScript&&(e=s.currentScript.src),!e)){var a=s.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{t(8440),t(3705),t(3676),t(5270),t(7795),t(6841),t(8790),t(8980),t(1910),t(6606),t(5840),t(3326),t(446),t(9558),t(7838),t(4475),t(3979),t(7714),t(179),t(5882),t(6456),t(1349),t(3148),t(5235),t(5253),t(8810),t(7916),t(4857),t(4906),t(8966),t(9784),t(730),t(5595),t(6995),t(2297),t(7104),t(1016),t(6365),t(2593),t(1075),t(2600),t(1260);var e=t(6516);const s=[{title:"Example Site",img1:e,img2:e,details:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Beatae nihil esse autem. Neque earum",code:"",view:"",download:null},{title:"Example Site",img1:e,img2:e,details:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Beatae nihil esse autem. Neque earum",code:"",view:"",download:null},{title:"Example Site",img1:e,img2:e,details:"Lorem ipsum dolor sit amet consectetur adipisicing elit. Beatae nihil esse autem. Neque earum",code:"",view:"",download:null},{title:"Snake AI",img1:t(9825),img2:t(9016),details:"Snake game solver made using c++ and sfml<br> slover types: random, bfs, dfs, A*, player, hamiltonian",code:"https://github.com/CodeBulletin/AI-Snake",view:null,download:"https://github.com/CodeBulletin/AI-Snake/releases/download/v1.0.0/Release.zip"},{title:"MNCA Simulator",img1:t(6980),img2:t(346),details:"Multi neighbour cellular automaton simulator accelerated using shaders <br> Created using: C++, SFML, GLSL",code:"https://github.com/CodeBulletin/Multi-Neighbourhood-CA",view:null,download:"https://github.com/CodeBulletin/Multi-Neighbourhood-CA/releases/download/Main/MNCA.zip"},{title:"Maze.EXE",img1:t(3686),img2:t(6549),details:"Maze Generation/Solving/Game Visualization <br> created using: SFML, C++",code:"https://github.com/CodeBulletin/Maze.Exe",view:"https://www.youtube.com/watch?v=n_ZV4yC-eT4&t=173s",download:"https://github.com/CodeBulletin/Maze.Exe/releases/download/Maze.exe/Release.zip"},{title:"Electrostatic Simulator",img1:t(6564),img2:t(2584),details:"Electro Static/Dynamic/voltage/electric field simulator accelerated using shaders<br> created using: SFML, C++, GLSL",code:"https://github.com/CodeBulletin/Electrostatic-Simulation",view:null,download:"https://github.com/CodeBulletin/Electrostatic-Simulation/releases/download/v1.0.0/Release.zip"},{title:"Wave Simulator",img1:t(5387),img2:t(8198),details:"Wave simulator And interference pattern generator accelerated using shaders<br> created using: SFML, C++, GLSL",code:"https://github.com/CodeBulletin/Sound-Wave-Simulation",view:null,download:null},{title:"Tic Tac Toe AI",img1:t(6798),img2:t(6130),details:"Tic Tac Toe Min Max AI <br> created using: SFML, C++",code:"https://github.com/CodeBulletin/Tic-Tac-Toe-AI",view:null,download:"https://github.com/CodeBulletin/Tic-Tac-Toe-AI/releases/download/v1.0.0/Release.zip"},{title:"Cellular Automata 1D",img1:t(6897),img2:t(8027),details:"Cellular Automata 1D Simulation <br> created using: SFML, C++",code:"https://github.com/CodeBulletin/CellularAutomata/tree/master",view:null,download:"https://github.com/CodeBulletin/CellularAutomata/releases/download/v1.0.0/Release.zip"},{title:"Game Of Life",img1:t(2101),img2:t(2101),details:"Game Of Life Simulation accelerated using shaders<br> created using: SFML, C++, GLSL",code:"https://github.com/CodeBulletin/CellularAutomata2D",view:null,download:"https://github.com/CodeBulletin/CellularAutomata2D/releases/download/v1/Release.zip"}],a=(Array.from(document.getElementsByTagName("section")),Array.from(document.getElementsByClassName("nav-link")),document.getElementById("body")),o=document.getElementById("dark_mode_check_box"),n=document.getElementById("Navbar"),i=(document.getElementById("home_gif1"),document.getElementById("home_gif2"),document.getElementById("html"));var l;const d=e=>new Promise((s=>setTimeout(s,e)));document.getElementById("dark_mode_check_box").onchange=()=>{a.classList.contains("dark")?(a.classList.remove("dark"),localStorage.setItem("dark_mode","no")):(a.classList.add("dark"),localStorage.setItem("dark_mode","yes"))},document.getElementById("nav-sm-buton").onclick=()=>{var e=document.getElementById("nav-sm-buton");e.classList.toggle("opened"),e.setAttribute("aria-expanded",e.classList.contains("opened")),document.getElementById("nav-items").classList.toggle("nav-menu-open",e.classList.contains("opened"))},window.onload=async function(){var e;null===localStorage.getItem("dark_mode")&&localStorage.setItem("dark_mode","yes"),"yes"===localStorage.getItem("dark_mode")?o.checked=!0:a.classList.remove("dark"),e=n.offsetHeight,l=e,i.style.scrollPaddingTop=n.offsetHeight+"px",function(e){-1==e&&(e=s.length);const t=document.getElementById("projects-display");let a="";for(var o=0;o<e;o++)a+=`<div class="card fade">\n        <img src="${s[o].img1}" alt="project-image" class="img"/>\n        <img src="${s[o].img2}" alt="project-image" class="img"/>\n        <div class="project-details">\n            <h2>${s[o].title}</h2>\n            <div class="details">\n                <p>${s[o].details}</p>\n                <div class="links">`+(null!=(n=s[o].view)?`<a href="${n}">\n        <div>\n            <svg xmlns="http://www.w3.org/2000/svg" width=1rem height=1rem viewBox="0 0 16 16">\n                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>\n                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>\n            </svg>\n            <span>View</span>\n        </div>\n    </a>`:"")+(null!=(i=s[o].download)?`<a href="${i}">\n        <div>\n            <svg height=1rem width=1rem viewbox="0 0 48 48">\n                <path d="M11 40q-1.2 0-2.1-.9Q8 38.2 8 37v-7.15h3V37h26v-7.15h3V37q0 1.2-.9 2.1-.9.9-2.1.9Zm13-7.65-9.65-9.65 2.15-2.15 6 6V8h3v18.55l6-6 2.15 2.15Z"/>\n            </svg>\n            <span>Download</span>\n        </div>\n    </a>`:"")+(null!=(l=s[o].code)?`<a href="${l}">\n        <div>\n            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-code-slash" viewBox="0 0 16 16">\n                <path d="M10.478 1.647a.5.5 0 1 0-.956-.294l-4 13a.5.5 0 0 0 .956.294l4-13zM4.854 4.146a.5.5 0 0 1 0 .708L1.707 8l3.147 3.146a.5.5 0 0 1-.708.708l-3.5-3.5a.5.5 0 0 1 0-.708l3.5-3.5a.5.5 0 0 1 .708 0zm6.292 0a.5.5 0 0 0 0 .708L14.293 8l-3.147 3.146a.5.5 0 0 0 .708.708l3.5-3.5a.5.5 0 0 0 0-.708l-3.5-3.5a.5.5 0 0 0-.708 0z"/>\n            </svg>\n            <span>Code</span>\n        </div>\n    </a>`:"")+"</div>\n            </div>\n        </div>\n    </div>";var n,i,l;t.innerHTML=a+t.innerHTML}(-1),await d(3e3),document.getElementById("loading-page").style.display="none",await d(100),function(){const e=Array.from(document.getElementsByClassName("fade")).concat(Array.from(document.getElementsByClassName("fade-x"))),s=new IntersectionObserver((e=>{e.forEach((e=>{e.target.classList.toggle("rm-fade",e.isIntersecting),e.isIntersecting&&!e.target.classList.contains("fade-x")&&s.unobserve(e.target)}))}),{threshold:0,rootMargin:(-l).toString()+"px 0px 0px 0px"});e.forEach((e=>{s.observe(e)}))}()}})()})();